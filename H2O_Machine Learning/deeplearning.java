/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2018-01-01T12:23:19.338+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named deeplearning

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/deeplearning > deeplearning.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m deeplearning.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="deeplearning", algorithm="deeplearning")
public class deeplearning extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 2; }
  public int nclasses() { return 2; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[2];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = new double[2];
    static {
      NORMMUL_0.fill(VALUES);
    }
    static final class NORMMUL_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 1.8382025499105115;
        sa[1] = 1.1712057573774217;
      }
    }
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = new double[2];
    static {
      NORMSUB_0.fill(VALUES);
    }
    static final class NORMSUB_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 1.6929680000000003;
        sa[1] = 4.88522;
      }
    }
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {2,8,4,2,2};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ deeplearning_Activation_0.VALUES,
      /* Rectifier */ deeplearning_Activation_1.VALUES,
      /* Rectifier */ deeplearning_Activation_2.VALUES,
      /* Rectifier */ deeplearning_Activation_3.VALUES,
      /* Softmax */ deeplearning_Activation_4.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ deeplearning_Bias_0.VALUES,
      /* Rectifier */ deeplearning_Bias_1.VALUES,
      /* Rectifier */ deeplearning_Bias_2.VALUES,
      /* Rectifier */ deeplearning_Bias_3.VALUES,
      /* Softmax */ deeplearning_Bias_4.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ deeplearning_Weight_0.VALUES,
      /* Rectifier */ deeplearning_Weight_1.VALUES,
      /* Rectifier */ deeplearning_Weight_2.VALUES,
      /* Rectifier */ deeplearning_Weight_3.VALUES,
      /* Softmax */ deeplearning_Weight_4.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_deeplearning.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* Magnitude */ null,
    /* Depth */ null,
    /* Earthquake */ deeplearning_ColInfo_2.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.5,0.5};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public deeplearning() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(1380038050379446504L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i])*NORMMUL.VALUES[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.40117296142604036);
    return preds;
  }
}
// Neuron activation values for Input layer
class deeplearning_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[2];
  static {
    deeplearning_Activation_0_0.fill(VALUES);
  }
  static final class deeplearning_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class deeplearning_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[8];
  static {
    deeplearning_Activation_1_0.fill(VALUES);
  }
  static final class deeplearning_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class deeplearning_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[4];
  static {
    deeplearning_Activation_2_0.fill(VALUES);
  }
  static final class deeplearning_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class deeplearning_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[2];
  static {
    deeplearning_Activation_3_0.fill(VALUES);
  }
  static final class deeplearning_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class deeplearning_Activation_4 implements java.io.Serializable {
  public static final double[] VALUES = new double[2];
  static {
    deeplearning_Activation_4_0.fill(VALUES);
  }
  static final class deeplearning_Activation_4_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class deeplearning_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class deeplearning_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[8];
  static {
    deeplearning_Bias_1_0.fill(VALUES);
  }
  static final class deeplearning_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.36471303692345514;
      sa[1] = 0.48167331355797705;
      sa[2] = 0.5739209452681241;
      sa[3] = 0.50281017141031;
      sa[4] = 0.5322016245222496;
      sa[5] = 0.5475408757559074;
      sa[6] = 0.5011097287567806;
      sa[7] = 0.6011857093775606;
    }
  }
}
// Neuron bias values for Rectifier layer
class deeplearning_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[4];
  static {
    deeplearning_Bias_2_0.fill(VALUES);
  }
  static final class deeplearning_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0358235091769088;
      sa[1] = 0.9830965787315454;
      sa[2] = 0.9617576740615842;
      sa[3] = 1.0;
    }
  }
}
// Neuron bias values for Rectifier layer
class deeplearning_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[2];
  static {
    deeplearning_Bias_3_0.fill(VALUES);
  }
  static final class deeplearning_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.8547340121222314;
      sa[1] = 1.021008439358472;
    }
  }
}
// Neuron bias values for Softmax layer
class deeplearning_Bias_4 implements java.io.Serializable {
  public static final double[] VALUES = new double[2];
  static {
    deeplearning_Bias_4_0.fill(VALUES);
  }
  static final class deeplearning_Bias_4_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 2.024569639182508;
      sa[1] = -0.00821746455300244;
    }
  }
}
class deeplearning_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class deeplearning_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[16];
  static {
    deeplearning_Weight_1_0.fill(VALUES);
  }
  static final class deeplearning_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.2908234f;
      sa[1] = -0.22674893f;
      sa[2] = -0.029941661f;
      sa[3] = 0.5303507f;
      sa[4] = -0.48579353f;
      sa[5] = -0.34564385f;
      sa[6] = -0.011192875f;
      sa[7] = 0.60753304f;
      sa[8] = 0.5228794f;
      sa[9] = 0.17910749f;
      sa[10] = -0.26201347f;
      sa[11] = -0.22178718f;
      sa[12] = 0.06795369f;
      sa[13] = 0.61082953f;
      sa[14] = -0.51549244f;
      sa[15] = -0.7827823f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class deeplearning_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[32];
  static {
    deeplearning_Weight_2_0.fill(VALUES);
  }
  static final class deeplearning_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.5941036f;
      sa[1] = 0.3766141f;
      sa[2] = 0.17965831f;
      sa[3] = -0.79343796f;
      sa[4] = -0.23831259f;
      sa[5] = -0.017900556f;
      sa[6] = 0.285944f;
      sa[7] = 0.5676438f;
      sa[8] = 0.58111393f;
      sa[9] = 0.16280305f;
      sa[10] = -0.32942918f;
      sa[11] = 0.44257852f;
      sa[12] = -0.62907976f;
      sa[13] = -0.20053898f;
      sa[14] = 0.20990855f;
      sa[15] = -0.45853385f;
      sa[16] = -0.18847844f;
      sa[17] = 0.06856439f;
      sa[18] = 0.22553195f;
      sa[19] = 0.07874138f;
      sa[20] = -0.226643f;
      sa[21] = -0.4485788f;
      sa[22] = 0.45402774f;
      sa[23] = 0.6122864f;
      sa[24] = -0.5716832f;
      sa[25] = -0.3530661f;
      sa[26] = -0.049604986f;
      sa[27] = -0.34456506f;
      sa[28] = -0.5436776f;
      sa[29] = -0.43671274f;
      sa[30] = 0.25026673f;
      sa[31] = -0.43809357f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class deeplearning_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[8];
  static {
    deeplearning_Weight_3_0.fill(VALUES);
  }
  static final class deeplearning_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.696393f;
      sa[1] = 1.0313882f;
      sa[2] = 0.4112919f;
      sa[3] = 0.15011525f;
      sa[4] = 0.539833f;
      sa[5] = -0.11041047f;
      sa[6] = 0.91557986f;
      sa[7] = 0.3073151f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class deeplearning_Weight_4 implements java.io.Serializable {
  public static final float[] VALUES = new float[4];
  static {
    deeplearning_Weight_4_0.fill(VALUES);
  }
  static final class deeplearning_Weight_4_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.3606253f;
      sa[1] = 2.7449744f;
      sa[2] = 3.096371f;
      sa[3] = 1.9866346f;
    }
  }
}
// The class representing training column names
class NamesHolder_deeplearning implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    NamesHolder_deeplearning_0.fill(VALUES);
  }
  static final class NamesHolder_deeplearning_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Magnitude";
      sa[1] = "Depth";
    }
  }
}
// The class representing column Earthquake
class deeplearning_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    deeplearning_ColInfo_2_0.fill(VALUES);
  }
  static final class deeplearning_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "No";
      sa[1] = "Yes";
    }
  }
}


